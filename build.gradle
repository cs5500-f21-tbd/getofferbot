plugins {
    // Build "shadow" JARs for deployment
    id 'com.github.johnrengelman.shadow'

    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // Lombok provides shorthand for repetitive Java tasks
    id "io.freefair.lombok"

    // Spotless to format code easily
    id "com.diffplug.spotless"

    // JaCoCo for code coverage analysis and reporting
    id 'jacoco'
}

repositories {
    mavenCentral()
    jcenter()
    maven {
      name 'm2-dv8tion'
      url 'https://m2.dv8tion.net/releases'
    }
}

dependencies {
    // log4j so JDA can log
    implementation 'org.apache.logging.log4j:log4j-api:_'
    implementation 'org.apache.logging.log4j:log4j-core:_'
    implementation 'org.slf4j:slf4j-simple:_'

    // sparkjava for simple HTTP serving
    implementation "com.sparkjava:spark-core:_"

    // Use JUnit Jupiter API for testing.
    testImplementation Testing.junit.api

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly Testing.junit.engine

    // Annotations such as Nullable
    implementation 'com.google.code.findbugs:annotations:_'

    // Force JRE Guava to work around issues with Truth
    testImplementation "com.google.guava:guava:_"

    // Fluent assertions for testing
    testImplementation 'com.google.truth:truth:_'

    // JDA for talking to Discord
    implementation ('net.dv8tion:JDA:_') {
        // Remove the next line if your bot needs voice support!
        exclude module: "opus-java"
    }

    // Use dagger for dependency injection
    implementation 'com.google.dagger:dagger:2.40'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.40'

    // MongoDB client
    implementation 'org.mongodb:mongodb-driver:3.12.10'

    // Jsoup
    implementation 'org.jsoup:jsoup:1.14.3'

    // Gson to handle json data
    implementation 'com.google.code.gson:gson:2.8.9'

    // Jackson to handle json file
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.0'
}

application {
    // Define the main class for the application.
    mainClassName = 'edu.northeastern.cs5500.starterbot.App'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// Target Java 1.8 - make sure system.properties matches this as well
sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'build/generated/sources/annotationProcessor/java/main'
        }
    }
    test {
        java {
            srcDirs 'src/test/java'
            srcDirs 'build/generated/sources/annotationProcessor/java/test'
        }
    }
}

spotless {
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'
        targetExclude 'build/**'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        targetExclude 'build/**'
        googleJavaFormat().aosp()
    }
}

jacoco {
    toolVersion = "0.8.7"
}

// Credit: baeldung.com/jacoco-report-exclude
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    // Excluding starter code
    // Reference: https://stackoverflow.com/questions/29887805/filter-jacoco-coverage-reports-with-gradle
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/repository/**',
                              '**/service/**'
                              ])
        }))
    }
}
